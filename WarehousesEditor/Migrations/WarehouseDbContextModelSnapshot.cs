// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehousesEditor.Models;

namespace WarehousesEditor.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    partial class WarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WarehousesEditor.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WarehousesEditor.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.HasKey("CurrencyId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CurrencyName")
                        .IsUnique();

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("WarehousesEditor.Models.Goods", b =>
                {
                    b.Property<int>("GoodsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarcodeNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(8)")
                        .HasDefaultValueSql("('00000000')")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<decimal>("BaseCurrencyPrice")
                        .HasColumnType("money");

                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("GoodsName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("([dbo].[ComputePrice]([CurrencyId],[BaseCurrencyPrice]))");

                    b.HasKey("GoodsId");

                    b.HasIndex("BarcodeNumber")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.HasIndex("GoodsName")
                        .IsUnique();

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("WarehousesEditor.Models.GoodsCategory", b =>
                {
                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("GoodsId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("GoodsCategories");
                });

            modelBuilder.Entity("WarehousesEditor.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("WarehouseId");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WarehousesEditor.Models.WarehouseGoods", b =>
                {
                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("WarehouseId", "GoodsId");

                    b.HasIndex("GoodsId");

                    b.ToTable("WarehousesGoods");
                });

            modelBuilder.Entity("WarehousesEditor.Models.Goods", b =>
                {
                    b.HasOne("WarehousesEditor.Models.Currency", "Currency")
                        .WithMany("Goods")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Goods_Currencies")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehousesEditor.Models.GoodsCategory", b =>
                {
                    b.HasOne("WarehousesEditor.Models.Category", "Category")
                        .WithMany("GoodsCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_GoodsCategories_Categories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehousesEditor.Models.Goods", "Goods")
                        .WithMany("GoodsCategories")
                        .HasForeignKey("GoodsId")
                        .HasConstraintName("FK_GoodsCategories_Goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehousesEditor.Models.WarehouseGoods", b =>
                {
                    b.HasOne("WarehousesEditor.Models.Goods", "Goods")
                        .WithMany("WarehousesGoods")
                        .HasForeignKey("GoodsId")
                        .HasConstraintName("FK_WarehousesGoods_Goods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarehousesEditor.Models.Warehouse", "Warehouse")
                        .WithMany("WarehousesGoods")
                        .HasForeignKey("WarehouseId")
                        .HasConstraintName("FK_WarehousesGoods_Warehouses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
